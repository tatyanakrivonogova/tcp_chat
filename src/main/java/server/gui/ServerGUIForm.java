package server.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import server.TCPServer;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class ServerGUIForm {
    private final TCPServer server;
    public JPanel panel;
    public JTextArea notifications;
    private JButton STARTButton;
    private JButton STOPButton;
    private JTextPane currentPort;

    public ServerGUIForm(ServerGUI _gui, TCPServer _server) {
        server = _server;
        int port = _gui.getPort();
        STARTButton.addActionListener(e -> server.start(port));
        STOPButton.addActionListener(e -> server.stop());
        currentPort.setText("PORT : " + port);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel.setBackground(new Color(-16777216));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        notifications = new JTextArea();
        notifications.setBackground(new Color(-16777216));
        notifications.setEditable(false);
        notifications.setEnabled(false);
        Font notificationsFont = this.$$$getFont$$$("Arial Black", -1, 14, notifications.getFont());
        if (notificationsFont != null) notifications.setFont(notificationsFont);
        notifications.setForeground(new Color(-1));
        notifications.setMaximumSize(new Dimension(-1, -1));
        notifications.setMinimumSize(new Dimension(300, 300));
        notifications.setPreferredSize(new Dimension(300, 300));
        scrollPane1.setViewportView(notifications);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setForeground(new Color(-16777216));
        panel.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        STARTButton = new JButton();
        STARTButton.setBackground(new Color(-14808155));
        Font STARTButtonFont = this.$$$getFont$$$("Arial Black", -1, 16, STARTButton.getFont());
        if (STARTButtonFont != null) STARTButton.setFont(STARTButtonFont);
        STARTButton.setForeground(new Color(-1));
        STARTButton.setText("START");
        panel1.add(STARTButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        STOPButton = new JButton();
        STOPButton.setBackground(new Color(-14808155));
        Font STOPButtonFont = this.$$$getFont$$$("Arial Black", -1, 16, STOPButton.getFont());
        if (STOPButtonFont != null) STOPButton.setFont(STOPButtonFont);
        STOPButton.setForeground(new Color(-1));
        STOPButton.setText("STOP");
        panel1.add(STOPButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        currentPort = new JTextPane();
        currentPort.setBackground(new Color(-14808155));
        currentPort.setCaretColor(new Color(-1));
        currentPort.setEditable(false);
        Font currentPortFont = this.$$$getFont$$$("Arial Black", -1, 16, currentPort.getFont());
        if (currentPortFont != null) currentPort.setFont(currentPortFont);
        currentPort.setForeground(new Color(-1));
        currentPort.setSelectedTextColor(new Color(-1));
        panel2.add(currentPort, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(300, 30), new Dimension(300, 30), 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}

